import Cocoa

//Like regular optionals, implicitly unwrapped optionals might contain a value or they might be nil. However, unlike regular optionals you donâ€™t need to unwrap them in order to use them: you can use them as if they werenâ€™t optional at all.

//Implicitly unwrapped optionals are created by adding an exclamation mark after your type name, like thisðŸ‘‡
let age: Int! = nil
//Because they behave as if they were already unwrapped, you donâ€™t need if let or guard let to use implicitly unwrapped optionals. However, if you try to use them and they have no value â€“ if they are nil â€“ your code crashes.

//Implicitly unwrapped optionals exist because sometimes a variable will start life as nil, but will always have a value before you need to use it. Because you know they will have a value by the time you need them, itâ€™s helpful not having to write if let all the time.

//That being said, if youâ€™re able to use regular optionals instead itâ€™s generally a good idea.


