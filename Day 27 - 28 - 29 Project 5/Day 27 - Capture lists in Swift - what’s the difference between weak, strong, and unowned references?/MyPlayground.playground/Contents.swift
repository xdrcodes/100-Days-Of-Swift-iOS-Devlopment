import Cocoa

//Capture lists in Swift: whatâ€™s the difference between weak, strong, and unowned references?

//Capture lists come before a closureâ€™s parameter list in your code, and capture values from the environment as either strong, weak, or unowned. We use them a lot, mainly to avoid strong reference cycles â€“ aka retain cycles.

//Deciding which to use isnâ€™t easy when youâ€™re learning, so you can spend time trying to figure out strong vs weak, or weak vs unowned, but as you progress with your learning youâ€™ll start to realize thereâ€™s often only one right choice.

//First, letâ€™s take a look at the problem. First, hereâ€™s a simple classðŸ‘‡

class Singer {
    func playSong() {
        print("Shake it off!")
    }
}

//Second, hereâ€™s a function that creates an instance of Singer, creates a closure that uses the singerâ€™s playSong() method, and returns that closure for us to use elsewhereðŸ‘‡

func sing() -> () -> Void {
    let taylor = Singer()

    let singing = {
        taylor.playSong()
        return
    }

    return singing
}

//Finally, we can call sing() to get back a function we can call wherever we want to have playSong() printedðŸ‘‡

let singFunction = sing()
singFunction()

